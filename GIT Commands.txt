git add --> Moves changes from the working directory to the staging area.

git branch --> Show the different branches

git checkout --> navigate existing branches

git clean --> Removes untracked files from the working directory.

git clone --> Creates a copy of an existing Git repository.

git commit --> Takes the staged snapshot and commits it to the project history.

git commit --amend --> This is very useful when you forget to stage a file or omit important information from the commit message.

git config --> To make changes to command according to user need

git fetch --> This gives you a chance to inspect changes before merging them with your project.

git init --> Initializes a new Git repository.

git log --> Shows all the commit

git merge --> A powerful way to integrate changes from divergent branches.

git pull --> It downloads a branch from a remote repository, then immediately merges it into the current branch.

git push --> It lets you move a local branch to another repository.

git rebase --> Rebasing lets you move branches around, which helps you avoid unnecessary merge commits.

git rebase -i --> This provides all the benefits of a normal rebase, but gives you the opportunity to add, edit, or delete commits along the way.

git reflog --> This allows you to go back to changesets even though they are not referenced by any branch or tag.

git remote --> A convenient tool for administering remote connections.

git reset --> Resetting lets you clean up or completely remove changes that have not been pushed to a public repository.

git revert --> When you discover a faulty commit, reverting is a safe and easy way to completely remove it from the code base.

git status --> Displays the state of the working directory and the staged snapshot.

git checkout -b <some name> --> To create new branch.

git branch -d <branch_name> --> To delete a branch after merging the required changes to main branch.

git branch -D <branch_name> --> To force delete the branch without merging the changes.